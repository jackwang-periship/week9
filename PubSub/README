* Publish and Subscribe
we'll deliver a message to multiple consumers. Re. published messages are going to be broadcast to all the receivers

* Exchanges
The core idea in the messaging model in RabbitMQ is that the producer never sends any messages directly to a queue. 
Actually, quite often the producer doesn't even know if a message will be delivered to any queue at all.
Instead, the producer can only send messages to an exchange. An exchange is a very simple thing. 
On one side it receives messages from producers and the other side it pushes them to queues. 
The exchange must know exactly what to do with a message it receives. 
Should it be appended to a particular queue? Should it be appended to many queues? 
Or should it get discarded. The rules for that are defined by the exchange type.

There are a few exchange types available: direct, topic, headers and fanout. 


							          | | | | |
					   		 
	Producer ---> Exchange
							  
							          | | | | |

Note: Declared the exchange. This step is necessary as publishing to a non-existing exchange is forbidden.

* Temporary queues
Previously we were using queues which had a specified name (hello and task_queue). 
Being able to name a queue was crucial for us -- we needed to point the workers to the same queue. 
Giving a queue a name is important when you want to share the queue between producers and consumers.

But what if we want to hear about all log messages, 
not just a subset of them. We're also interested only in currently flowing messages not in the old ones. 
To solve that we need two things.

Firstly, whenever we connect to Rabbit we need a fresh, empty queue. 
To do it we could create a queue with a random name, or, even better - let the server choose a random queue name for us. 
We can do this by not supplying the queue parameter to queue_declare:

	result = channel.queue_declare()

Secondly, once we disconnect the consumer the queue should be deleted. There's an exclusive flag for that:

	result = channel.queue_declare(exclusive=True)

* Bindings
We've already created a fanout exchange and a queue. Now we need to tell the exchange to send messages to our queue.
That relationship between exchange and a queue is called a binding.

	channel.queue_bind(exchange='logs', queue=result.method.queue)


								binding
							  /---------> | | | | |
					   		 /
	Producer ---> Exchange -- 
							 \  binding
							  \---------> | | | | |
							  
Note: The messages will be lost if no queue is bound to the exchange yet, 
but that's okay for us; if no consumer is listening yet we can safely discard the message.

* Getting Exchange Information
To list the exchanges on the server you can run the ever useful rabbitmqctl:

	sudo rabbitmqctl list_exchanges

You can list existing bindings using:

	sudo rabbitmqctl list_bindings
