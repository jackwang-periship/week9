* Message Routing
To subscribe only to a subset of the messages. For example, 
we will be able to direct only critical error messages to the log file (to save disk space), 
while still being able to print all of the log messages on the console.

* Bindings with routing_key
Bindings can take an extra routing_key parameter. 
To avoid the confusion with a basic_publish parameter we're going to call it a binding key.
This is how we could create a binding with a key:

	channel.queue_bind(exchange=exchange_name,
                   queue=queue_name,
                   routing_key='black')
                   
Note: The meaning of a binding key depends on the exchange type. The fanout exchanges, 
which we used previously, simply ignored its value.

* Direct exchange
We will use a direct exchange instead. The routing algorithm behind a direct exchange is simple - 
a message goes to the queues whose binding key exactly matches the routing key of the message.

To illustrate that, consider the following setup:

											       Q1
							   				  /---------> | | | | |
						bind with ORANGE key /
					   		 				/
	Producer ---> Exchange (Direct Type)---- 
							 				\
				   bind with BLACK, RED key	 \     Q2
							  				  \---------> | | | | |


In such a setup a message published to the exchange with a routing key orange will be routed to queue Q1. 
Messages with a routing key of black or green will go to Q2. All other messages will be discarded.

Note: It is legal to bind multiple queues with the same binding key. In which case, it is the same as "fanout" type.

 
							  				  